2022-02-10: version 0.4.0

 • The internal usage of SCM procedures and variables defined in
   libguile-gi.so are given the “$” prefix throughout.
   
 • Internal usage of GLib and GObject functions has been reduced.
   Internal usage of GLib and GObject is limited to packing/unpacking
   GLib and GObject types.  We no longer use GLib for internal use of
   hash tables, lists, environment variables, and logging.
 
 • Many more Guile procedures now have docstrings.

 • Most important variables and procedures are now re-exported by the
   (gi) module.  For most cases, (gi) should be all you need.

 • In (gi repository), the public <GIBaseInfo> GOOPS class has been
   replaced by a private <RepositoryEntry> foreign object type.
   
 • In (gi repository), the new procedure “get-gir-names” returns a
   list of the names of entries in a library as they appear in the
   typelib, before conversion to Scheme-like names. These names are
   the ones expected by the “load-by-name” procedure.
   
 • In (gi repository), the “load” method has been removed.  As a
   consequence, loading this module no longer upgrades (guile) “load”
   to a generic function.
   
 • In (gi repository), the “info” method and “infos” procedure are
   removed.  The “load-by-name” and “get-lib-names” procedures could be
   a workaround.
   
 • In (gi repository), the “LOAD_INFO_ONLY” option for “load-by-name”
   has been removed.

 • The (gi logging) module — which contained “install-port-logger!”,
   “install-journal-logger!”, and “install-custom-logger!” — has been
   removed.

 • Since GLib logging is not being used, the G_MESSAGES_DEBUG
   environment variable cannot be used to activate internal debug
   messages.  The GIG_DEBUG environment variable is now used to
   activate internal logging. If the environment variable
   GIG_DEBUG_OUTPUT is set with a valid filename, debug output will be
   appended that file.  Otherwise it will be written to stderr.  For
   stderr, if the TERM environment variable is set to a common color
   terminal, ANSI color will be used.

 • For (gi types), it is now split into two modules: (gi types) and
   (gi functions).

 • (gi functions) is the new home of “is-registered-callback?” and
   “get-registered-callback-closure-pointer”.  It also is the module
   for “before-callback-hook”, “before-c-callback-hook”, and
   “before-function-hook”, which now are renamed from
   “%before-callback-hook”, “%before-c-callback-hook”, and
   “%before-function-hook” respectively.

2021-12-29: version 0.3.2
 - SCM GObject arguments should better preserve their type when
   passing through function calls, and not downgrade to the argument's
   required type (#104)
 - Handle GVariant arguments
 - Handle GBoxed module variables
 - Initial handling of Gtk4's GtkExpression and other new, fundamental
   types
 - More verbose warnings
 - More stringent typechecks
 - Avoid crashes cause by calling callbacks in non-guile mode
 - Avoid Unicode combining character in test case

Thanks to
 - LordYuuma
 - Bob131
 - Danny Milosavljevic <daym>
 - Lloyd Konneker <bootchk>

2020-12-31: version 0.3.1
 - Marshall GValues containing pointers
 - Add compatibility functions for guile-cairo
 - Marshall GValues containing boxed types
 - Handle in/out GClosures (#82, #83)
 - Allow the return of multiple values from signal handlers
 - Fix errors associated with defining properties of GObject or GInterface
   classes
 - Fix crash caused by passing NULL values to GClosures (#102)
 - Improve handling of the loading of shared libraries, reducing the
   incidence of problems caused when guile-gi loads a different GLib
   or GObject version than the one a dlopened library may depend on
 - Handle some GInterface types
 - Marshall arrays of GTypes
 - Add a workaround for 'make check' failures in Guix environments

 Thanks to assistance and reporting by
 - Danny <daym>
 - Detlev Zundel <laodzu>
 - Danny O'Brien <dannyob>
 - Arun Isaac <arunisaac>


2020-03-24: version 0.3.0
- Handle mutation operations of caller-allocated function arguments (#39)
  - Some procedures with preallocated in/out arguments will now bear the
    mutation sigil `!'
- Clean up output argument processing (#39)
  - This may re-order the output arguments of some procedures
- Use conventional installation directory for binary guile extensions (#72)
- Improve Guix build and install
- Stricter errors for callbacks and signals
- Don't prematurely catch errors thrown by callbacks in the callback handler
- New custom logger
- New hook procedures for inspecting FFI calls
- Better tests for callback, signals, arrays (#54, #57)
- Clean up debug info (#77)
- Updated docs (#76)
- Bug fixes

2020-01-27: version 0.2.2
- Add Guile 3.0 to configure
- Callback fixes (#68, #70)
  - Prevent garbage collection of callbacks before use
  - Fix unpacking of integers in callbacks
  - Harmonize the calling convention of callback parameters
    with the calling convention of introspected C functions
- Some support for GHashTable types (#56)
- Improvements to autogenerated documentation (#50)
- Bug fixes

2019-11-01: version 0.2.1
- Improved efficiency in build and test
  - Non-recursive make
  - SRFI-64-based tests (#63)
  - Use system's gimarshallingtests
- Better support for GArray, GPtrArray, and GByteArray (#54)
- Improve generation of documentation for properties and enums
- Add subcategories to GLib-based logging
- More general documentation
- Bug fixes

2019-09-02: version 0.2.0
- Improvements in SCM <-> C argument conversion
  - simplified to GType + metadata (#31)
  - more type associations (#25)
    - enum and flags classes, plus an API for them (#33)
    - procedure wrappers for callbacks and closures
    - accessor wrapper for values
    - integer data types must be `<integer>`
    - float and double must be `<real>`
- Support generation of documentation
  - In-REPL documentation through guile-procedures.txt (#24)
  - Docbook XML (#23)
  - Add gtkdoc support through `gi-gtkdoc` (use `guild` to invoke)

2019-08-02: version 0.1.0
- Improvements in procedure generation
  - Use of GOOPS-based methods with short names
  - Renaming scheme applied to "namespaces" as well.
- Mapping of GObject oriented programming to GOOPS
  - added signals
  - added properties as accessors
- Improvements in C-to-SCM procedure argument conversions
  - Implicitly handle length arguments
  - Support for more types
- Better Typelib support
  - allow loading of single infos
  - prevent accidental leaking of definitions into the wrong module
- Support building with GCOV.

XXXX-XX-XX: version 0.0.3
- skipped (development only)

2019-06-16: version 0.0.2
- Improvements in C-to-SCM procedure argument conversions
- Guix skeleton (thanks Jan)
- More versatile GObject construction (thanks LordYuuma)
- More tests and demos

2018-11-15 05:56: version 0.0.1
- initial release
